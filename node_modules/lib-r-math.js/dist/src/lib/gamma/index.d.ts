import { IRNGNormal } from '../rng/normal';
import { gammafn } from './gamma_fn';
import { lgammafn } from './lgamma_fn';
import { digamma, pentagamma, psigamma, tetragamma, trigamma } from './polygamma';
export declare const special: {
    digamma: typeof digamma;
    gamma: typeof gammafn;
    lgamma: typeof lgammafn;
    pentagamma: typeof pentagamma;
    psigamma: typeof psigamma;
    tetragamma: typeof tetragamma;
    trigamma: typeof trigamma;
};
export declare function Gamma(norm?: IRNGNormal): Readonly<{
    dgamma: (x: import("src/lib/types").numVector, shape: number, rate?: number | undefined, scale?: number | undefined, asLog?: boolean) => any;
    pgamma: (q: import("src/lib/types").numVector, shape: number, rate?: number | undefined, scale?: number | undefined, lowerTail?: boolean, logP?: boolean) => any;
    qgamma: (q: import("src/lib/types").numVector, shape: number, rate?: number | undefined, scale?: number | undefined, lowerTail?: boolean, logP?: boolean) => any;
    rgamma: (n: number, shape: number, rate?: number | undefined, scale?: number | undefined) => number | number[] | undefined;
}>;
