export { Beta } from './beta';
export { Binomial } from './binomial';
export { NegativeBinomial } from './binomial-negative';
export { Cauchy } from './cauchy';
export { ChebyshevSeries } from './chebyshev';
export { ChiSquared } from './chi-2';
export { Exponential } from './exp';
export { FDist } from './f-distro';
export { Gamma } from './gamma';
export { Geometric } from './geometric';
export { HyperGeometric } from './hypergeometric';
export { Logistic } from './logis';
export { LogNormal } from './lognormal';
export { Multinomial, IdmultinomOptions } from './multinom';
export { Normal } from './normal';
export { Poisson } from './poisson';
export { rng, IRNG, IRNGNormal } from './rng';
export { SignRank } from './signrank';
export { StudentT } from './student-t';
export { Tukey } from './tukey';
export { Uniform } from './uniform';
export { Weibull } from './weibull';
export { Wilcoxon } from './wilcoxon';
export declare const special: Readonly<{
    besselJ: typeof import("src/lib/bessel/besselJ").bessel_j;
    besselY: typeof import("src/lib/bessel/besselY").bessel_y;
    besselK: typeof import("src/lib/bessel/besselK").bessel_k;
    besselI: typeof import("src/lib/bessel/besselI").bessel_i;
    choose: typeof import("src/lib/common/choose").choose;
    lchoose: typeof import("src/lib/common/choose").lchoose;
    beta: typeof import("src/lib/beta/beta").beta;
    lbeta: typeof import("src/lib/beta/lbeta").lbeta;
    digamma: typeof import("src/lib/gamma/polygamma").digamma;
    gamma: typeof import("src/lib/gamma/gamma_fn").gammafn;
    lgamma: typeof import("src/lib/gamma/lgamma_fn").lgammafn;
    pentagamma: typeof import("src/lib/gamma/polygamma").pentagamma;
    psigamma: typeof import("src/lib/gamma/polygamma").psigamma;
    tetragamma: typeof import("src/lib/gamma/polygamma").tetragamma;
    trigamma: typeof import("src/lib/gamma/polygamma").trigamma;
}>;
import { any, arrayrify, asArray, flatten, isOdd, ISummary, multiplex, multiplexer, numberPrecision, selector, sum, summary, Welch_Satterthwaite } from './r-func';
export { ISummary };
export declare const R: {
    any: typeof any;
    arrayrify: typeof arrayrify;
    asArray: typeof asArray;
    div: (...rest: any[]) => any;
    flatten: typeof flatten;
    isOdd: typeof isOdd;
    map: (xx: {}) => (fn: (x: any, idx?: string | number | undefined) => any) => any;
    each: (xx: {}) => (fn: (x: any, idx?: string | number | undefined) => any) => any;
    mult: (...rest: any[]) => any;
    multiplex: typeof multiplex;
    multiplexer: typeof multiplexer;
    numberPrecision: typeof numberPrecision;
    selector: typeof selector;
    seq: (adjust?: number) => (adjustMin?: number) => (start: number, end?: number | undefined, step?: number) => number[];
    sum: typeof sum;
    summary: typeof summary;
    Welch_Satterthwaite: typeof Welch_Satterthwaite;
    c: typeof flatten;
};
